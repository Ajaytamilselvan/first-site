{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Xogame.css\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Xogame = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [isXTurn, setIsXTurn] = useState(true);\n  const winner = calculateWinner(board);\n  const handleClick = index => {\n    if (board[index] || winner) return;\n    const newBoard = [...board];\n    newBoard[index] = isXTurn ? \"X\" : \"O\";\n    setBoard(newBoard);\n    setIsXTurn(!isXTurn);\n  };\n  const resetGame = () => {\n    setBoard(Array(9).fill(null));\n    setIsXTurn(true);\n  };\n  const navclose = useNavigate();\n  const handleClose = () => {\n    navclose('/Nav');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Xogame, \"eliWiiAWvpEqtew8qSCnTI4X3is=\", true);\n_c = Xogame;\nconst calculateWinner = squares => {\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  for (let [a, b, c] of winningCombinations) {\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n};\nexport default Xogame;\nvar _c;\n$RefreshReg$(_c, \"Xogame\");","map":{"version":3,"names":["React","useState","Fragment","_Fragment","jsxDEV","_jsxDEV","Xogame","_s","board","setBoard","Array","fill","isXTurn","setIsXTurn","winner","calculateWinner","handleClick","index","newBoard","resetGame","navclose","useNavigate","handleClose","_c","squares","winningCombinations","a","b","c","$RefreshReg$"],"sources":["D:/react_task1/task1/src/component/xogame/Xogame.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Xogame.css\";\r\n\r\nconst Xogame = () => {\r\n\r\n  const [board, setBoard] = useState(Array(9).fill(null)); \r\n  const [isXTurn, setIsXTurn] = useState(true); \r\n  const winner = calculateWinner(board); \r\n\r\n  const handleClick = (index) => {\r\n    if (board[index] || winner) return; \r\n\r\n    const newBoard = [...board];\r\n    newBoard[index] = isXTurn ? \"X\" : \"O\"; \r\n    setBoard(newBoard);\r\n    setIsXTurn(!isXTurn); \r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setIsXTurn(true);\r\n  };\r\n\r\n  const navclose=useNavigate();\r\n  const handleClose=()=>{\r\n    navclose('/Nav')\r\n  }\r\n\r\n  return (\r\n    <>\r\n    \r\n    </>\r\n  );\r\n};\r\n\r\nconst calculateWinner = (squares) => {\r\n  const winningCombinations = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let [a, b, c] of winningCombinations) {\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Xogame;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,cAAc;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAMa,MAAM,GAAGC,eAAe,CAACP,KAAK,CAAC;EAErC,MAAMQ,WAAW,GAAIC,KAAK,IAAK;IAC7B,IAAIT,KAAK,CAACS,KAAK,CAAC,IAAIH,MAAM,EAAE;IAE5B,MAAMI,QAAQ,GAAG,CAAC,GAAGV,KAAK,CAAC;IAC3BU,QAAQ,CAACD,KAAK,CAAC,GAAGL,OAAO,GAAG,GAAG,GAAG,GAAG;IACrCH,QAAQ,CAACS,QAAQ,CAAC;IAClBL,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB,CAAC;EAED,MAAMO,SAAS,GAAGA,CAAA,KAAM;IACtBV,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7BE,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EAED,MAAMO,QAAQ,GAACC,WAAW,CAAC,CAAC;EAC5B,MAAMC,WAAW,GAACA,CAAA,KAAI;IACpBF,QAAQ,CAAC,MAAM,CAAC;EAClB,CAAC;EAED,oBACEf,OAAA,CAAAF,SAAA,mBAEE,CAAC;AAEP,CAAC;AAACI,EAAA,CA9BID,MAAM;AAAAiB,EAAA,GAANjB,MAAM;AAgCZ,MAAMS,eAAe,GAAIS,OAAO,IAAK;EACnC,MAAMC,mBAAmB,GAAG,CAC1B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CACV;EAED,KAAK,IAAI,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,IAAIH,mBAAmB,EAAE;IACzC,IAAID,OAAO,CAACE,CAAC,CAAC,IAAIF,OAAO,CAACE,CAAC,CAAC,KAAKF,OAAO,CAACG,CAAC,CAAC,IAAIH,OAAO,CAACE,CAAC,CAAC,KAAKF,OAAO,CAACI,CAAC,CAAC,EAAE;MACxE,OAAOJ,OAAO,CAACE,CAAC,CAAC;IACnB;EACF;EAEA,OAAO,IAAI;AACb,CAAC;AAED,eAAepB,MAAM;AAAC,IAAAiB,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}